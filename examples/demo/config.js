import React from 'react';
import {Widgets, Operators} from 'react-awesome-query-builder';

const {
    TextWidget,
    NumberWidget,
    SelectWidget,
    MultiSelectWidget,
    DateWidget,
    BooleanWidget,
    TimeWidget,
    DateTimeWidget,
    ValueFieldWidget
} = Widgets;
const {ProximityOperator} = Operators;
import moment from 'moment';
import en_US from 'antd/lib/locale-provider/en_US';
import ru_RU from 'antd/lib/locale-provider/ru_RU';

const staticList = {
    location: {
        continent: {
            continent1: "Africa",
            continent2: "Antarctica",
            continent3: "Asia",
            continent4: "Europe",
            continent5: "Oceania",
            continent6: "North America",
            continent7: "South America"
        },
        country: {
          country0: "Afghanistan",
          country1: "Aland Islands",
          country2: "Albania",
          country3: "Algeria",
          country4: "American Samoa",
          country5: "Andorra",
          country6: "Angola",
          country7: "Anguilla",
          country8: "Antarctica",
          country9: "Antigua and Barbuda",
          country10: "Argentina",
          country11: "Armenia",
          country12: "Aruba",
          country13: "Australia",
          country14: "Austria",
          country15: "Azerbaijan",
          country16: "Bahamas",
          country17: "Bahrain",
          country18: "Bangladesh",
          country19: "Barbados",
          country20: "Belarus",
          country21: "Belgium",
          country22: "Belize",
          country23: "Benin",
          country24: "Bermuda",
          country25: "Bhutan",
          country26: "Bolivia",
          country27: "Bonaire",
          country28: "Bosnia and Herzegovina",
          country29: "Botswana",
          country30: "Bouvet Island",
          country31: "Brazil",
          country32: "British Indian Ocean Territory",
          country33: "Brunei Darussalam",
          country34: "Bulgaria",
          country35: "Burkina Faso",
          country36: "Burundi",
          country37: "Cambodia",
          country38: "Cameroon",
          country39: "Canada",
          country40: "Cabo Verde",
          country41: "Cayman Islands",
          country42: "Central African Republic",
          country43: "Chad",
          country44: "Chile",
          country45: "China",
          country46: "Christmas Island",
          country47: "Keeling Cocos Islands",
          country48: "Colombia",
          country49: "Comoros",
          country50: "Republic of the Congo",
          country51: "Congo",
          country52: "Cook Islands",
          country53: "Costa Rica",
          country54: "Côte d'Ivoire",
          country55: "Croatia",
          country56: "Cuba",
          country57: "Curaçao",
          country58: "Cyprus",
          country59: "Czech Republic",
          country60: "Denmark",
          country61: "Djibouti",
          country62: "Dominica",
          country63: "Dominican Republic",
          country64: "Ecuador",
          country65: "Egypt",
          country66: "El Salvador",
          country67: "Equatorial Guinea",
          country68: "Eritrea",
          country69: "Estonia",
          country70: "Ethiopia",
          country71: "Malvinas Falkland Islands",
          country72: "Faroe Islands",
          country73: "Fiji",
          country74: "Finland",
          country75: "France",
          country76: "French Guiana",
          country77: "French Polynesia",
          country78: "French Southern Territories",
          country79: "Gabon",
          country80: "Gambia",
          country81: "Georgia",
          country82: "Germany",
          country83: "Ghana",
          country84: "Gibraltar",
          country85: "Greece",
          country86: "Greenland",
          country87: "Grenada",
          country88: "Guadeloupe",
          country89: "Guam",
          country90: "Guatemala",
          country91: "Guernsey",
          country92: "Guinea",
          country93: "Guinea-Bissau",
          country94: "Guyana",
          country95: "Haiti",
          country96: "Heard Island and McDonald Islands",
          country97: "Holy See",
          country98: "Honduras",
          country99: "Hong Kong",
          country100: "Hungary",
          country101: "Iceland",
          country102: "India",
          country103: "Indonesia",
          country104: "Iran",
          country105: "Iraq",
          country106: "Ireland",
          country107: "Isle of Man",
          country108: "Israel",
          country109: "Italy",
          country110: "Jamaica",
          country111: "Japan",
          country112: "Jersey",
          country113: "Jordan",
          country114: "Kazakhstan",
          country115: "Kenya",
          country116: "Kiribati",
          country117: "Democratic People's Republic of Korea",
          country118: "Republic of Korea",
          country119: "Kuwait",
          country120: "Kyrgyzstan",
          country121: "Laos",
          country122: "Latvia",
          country123: "Lebanon",
          country124: "Lesotho",
          country125: "Liberia",
          country126: "Libya",
          country127: "Liechtenstein",
          country128: "Lithuania",
          country129: "Luxembourg",
          country130: "Macao",
          country131: "Macedonia",
          country132: "Madagascar",
          country133: "Malawi",
          country134: "Malaysia",
          country135: "Maldives",
          country136: "Mali",
          country137: "Malta",
          country138: "Marshall Islands",
          country139: "Martinique",
          country140: "Mauritania",
          country141: "Mauritius",
          country142: "Mayotte",
          country143: "Mexico",
          country144: "Federated States of Micronesia",
          country145: "Republic of Moldova",
          country146: "Monaco",
          country147: "Mongolia",
          country148: "Montenegro",
          country149: "Montserrat",
          country150: "Morocco",
          country151: "Mozambique",
          country152: "Myanmar",
          country153: "Namibia",
          country154: "Nauru",
          country155: "Nepal",
          country156: "Netherlands",
          country157: "New Caledonia",
          country158: "New Zealand",
          country159: "Nicaragua",
          country160: "Niger",
          country161: "Nigeria",
          country162: "Niue",
          country163: "Norfolk Island",
          country164: "Northern Mariana Islands",
          country165: "Norway",
          country166: "Oman",
          country167: "Pakistan",
          country168: "Palau",
          country169: "Palestine",
          country170: "Panama",
          country171: "Papua New Guinea",
          country172: "Paraguay",
          country173: "Peru",
          country174: "Philippines",
          country175: "Pitcairn",
          country176: "Poland",
          country177: "Portugal",
          country178: "Puerto Rico",
          country179: "Qatar",
          country180: "Réunion",
          country181: "Romania",
          country182: "Russia",
          country183: "Rwanda",
          country184: "Saint Barthélemy",
          country185: "Saint Helena, Ascension and Tristan da Cunha",
          country186: "Saint Kitts and Nevis",
          country187: "Saint Lucia",
          country188: "Saint Martin",
          country189: "Saint Pierre and Miquelon",
          country190: "Saint Vincent and the Grenadines",
          country191: "Samoa",
          country192: "San Marino",
          country193: "Sao Tome and Principe",
          country194: "Saudi Arabia",
          country195: "Senegal",
          country196: "Serbia",
          country197: "Seychelles",
          country198: "Sierra Leone",
          country199: "Singapore",
          country200: "Sint Maarten",
          country201: "Slovakia",
          country202: "Slovenia",
          country203: "Solomon Islands",
          country204: "Somalia",
          country205: "South Africa",
          country206: "South Georgia and the South Sandwich Islands",
          country207: "South Sudan",
          country208: "Spain",
          country209: "Sri Lanka",
          country210: "Sudan",
          country211: "Suriname",
          country212: "Svalbard and Jan Mayen",
          country213: "Swaziland",
          country214: "Sweden",
          country215: "Switzerland",
          country216: "Syrian Arab Republic",
          country217: "Taiwan",
          country218: "Tajikistan",
          country219: "Tanzania",
          country220: "Thailand",
          country221: "Timor-Leste",
          country222: "Togo",
          country223: "Tokelau",
          country224: "Tonga",
          country225: "Trinidad and Tobago",
          country226: "Tunisia",
          country227: "Turkey",
          country228: "Turkmenistan",
          country229: "Turks and Caicos Islands",
          country230: "Tuvalu",
          country231: "Uganda",
          country232: "Ukraine",
          country233: "United Arab Emirates",
          country234: "United Kingdom",
          country235: "United States",
          country236: "United States Minor Outlying Islands",
          country237: "Uruguay",
          country238: "Uzbekistan",
          country239: "Vanuatu",
          country240: "Venezuela",
          country241: "Viet Nam",
          country242: "British Virgin Islands",
          country243: "U.S. Virgin Islands",
          country244: "Wallis and Futuna",
          country245: "Western Sahara",
          country246: "Yemen",
          country247: "Zambia",
          country248: "Zimbabwe"
        },
        region: {
            region1: "TEXT FIELD ENTRY" //please change to direct entry, too many regions
        },
        timezone: {
          timezone0: "Africa/Abidjan",
          timezone1: "Africa/Accra",
          timezone2: "Africa/Addis_Ababa",
          timezone3: "Africa/Algiers",
          timezone4: "Africa/Asmara",
          timezone5: "Africa/Bamako",
          timezone6: "Africa/Bangui",
          timezone7: "Africa/Banjul",
          timezone8: "Africa/Bissau",
          timezone9: "Africa/Blantyre",
          timezone10: "Africa/Brazzaville",
          timezone11: "Africa/Bujumbura",
          timezone12: "Africa/Cairo",
          timezone13: "Africa/Casablanca",
          timezone14: "Africa/Ceuta",
          timezone15: "Africa/Conakry",
          timezone16: "Africa/Dakar",
          timezone17: "Africa/Dar_es_Salaam",
          timezone18: "Africa/Djibouti",
          timezone19: "Africa/Douala",
          timezone20: "Africa/El_Aaiun",
          timezone21: "Africa/Freetown",
          timezone22: "Africa/Gaborone",
          timezone23: "Africa/Harare",
          timezone24: "Africa/Johannesburg",
          timezone25: "Africa/Juba",
          timezone26: "Africa/Kampala",
          timezone27: "Africa/Khartoum",
          timezone28: "Africa/Kigali",
          timezone29: "Africa/Kinshasa",
          timezone30: "Africa/Lagos",
          timezone31: "Africa/Libreville",
          timezone32: "Africa/Lome",
          timezone33: "Africa/Luanda",
          timezone34: "Africa/Lubumbashi",
          timezone35: "Africa/Lusaka",
          timezone36: "Africa/Malabo",
          timezone37: "Africa/Maputo",
          timezone38: "Africa/Maseru",
          timezone39: "Africa/Mbabane",
          timezone40: "Africa/Mogadishu",
          timezone41: "Africa/Monrovia",
          timezone42: "Africa/Nairobi",
          timezone43: "Africa/Ndjamena",
          timezone44: "Africa/Niamey",
          timezone45: "Africa/Nouakchott",
          timezone46: "Africa/Ouagadougou",
          timezone47: "Africa/Porto-Novo",
          timezone48: "Africa/Sao_Tome",
          timezone49: "Africa/Tripoli",
          timezone50: "Africa/Tunis",
          timezone51: "Africa/Windhoek",
          timezone52: "America/Adak",
          timezone53: "America/Anchorage",
          timezone54: "America/Anguilla",
          timezone55: "America/Antigua",
          timezone56: "America/Araguaina",
          timezone57: "America/Argentina/Buenos_Aires",
          timezone58: "America/Argentina/Catamarca",
          timezone59: "America/Argentina/Cordoba",
          timezone60: "America/Argentina/Jujuy",
          timezone61: "America/Argentina/La_Rioja",
          timezone62: "America/Argentina/Mendoza",
          timezone63: "America/Argentina/Rio_Gallegos",
          timezone64: "America/Argentina/Salta",
          timezone65: "America/Argentina/San_Juan",
          timezone66: "America/Argentina/San_Luis",
          timezone67: "America/Argentina/Tucuman",
          timezone68: "America/Argentina/Ushuaia",
          timezone69: "America/Aruba",
          timezone70: "America/Asuncion",
          timezone71: "America/Atikokan",
          timezone72: "America/Bahia",
          timezone73: "America/Bahia_Banderas",
          timezone74: "America/Barbados",
          timezone75: "America/Belem",
          timezone76: "America/Belize",
          timezone77: "America/Blanc-Sablon",
          timezone78: "America/Boa_Vista",
          timezone79: "America/Bogota",
          timezone80: "America/Boise",
          timezone81: "America/Cambridge_Bay",
          timezone82: "America/Campo_Grande",
          timezone83: "America/Cancun",
          timezone84: "America/Caracas",
          timezone85: "America/Cayenne",
          timezone86: "America/Cayman",
          timezone87: "America/Chicago",
          timezone88: "America/Chihuahua",
          timezone89: "America/Costa_Rica",
          timezone90: "America/Creston",
          timezone91: "America/Cuiaba",
          timezone92: "America/Curacao",
          timezone93: "America/Danmarkshavn",
          timezone94: "America/Dawson",
          timezone95: "America/Dawson_Creek",
          timezone96: "America/Denver",
          timezone97: "America/Detroit",
          timezone98: "America/Dominica",
          timezone99: "America/Edmonton",
          timezone100: "America/Eirunepe",
          timezone101: "America/El_Salvador",
          timezone102: "America/Fort_Nelson",
          timezone103: "America/Fortaleza",
          timezone104: "America/Glace_Bay",
          timezone105: "America/Godthab",
          timezone106: "America/Goose_Bay",
          timezone107: "America/Grand_Turk",
          timezone108: "America/Grenada",
          timezone109: "America/Guadeloupe",
          timezone110: "America/Guatemala",
          timezone111: "America/Guayaquil",
          timezone112: "America/Guyana",
          timezone113: "America/Halifax",
          timezone114: "America/Havana",
          timezone115: "America/Hermosillo",
          timezone116: "America/Indiana/Indianapolis",
          timezone117: "America/Indiana/Knox",
          timezone118: "America/Indiana/Marengo",
          timezone119: "America/Indiana/Petersburg",
          timezone120: "America/Indiana/Tell_City",
          timezone121: "America/Indiana/Vevay",
          timezone122: "America/Indiana/Vincennes",
          timezone123: "America/Indiana/Winamac",
          timezone124: "America/Inuvik",
          timezone125: "America/Iqaluit",
          timezone126: "America/Jamaica",
          timezone127: "America/Juneau",
          timezone128: "America/Kentucky/Louisville",
          timezone129: "America/Kentucky/Monticello",
          timezone130: "America/Kralendijk",
          timezone131: "America/La_Paz",
          timezone132: "America/Lima",
          timezone133: "America/Los_Angeles",
          timezone134: "America/Lower_Princes",
          timezone135: "America/Maceio",
          timezone136: "America/Managua",
          timezone137: "America/Manaus",
          timezone138: "America/Marigot",
          timezone139: "America/Martinique",
          timezone140: "America/Matamoros",
          timezone141: "America/Mazatlan",
          timezone142: "America/Menominee",
          timezone143: "America/Merida",
          timezone144: "America/Metlakatla",
          timezone145: "America/Mexico_City",
          timezone146: "America/Miquelon",
          timezone147: "America/Moncton",
          timezone148: "America/Monterrey",
          timezone149: "America/Montevideo",
          timezone150: "America/Montserrat",
          timezone151: "America/Nassau",
          timezone152: "America/New_York",
          timezone153: "America/Nipigon",
          timezone154: "America/Nome",
          timezone155: "America/Noronha",
          timezone156: "America/North_Dakota/Beulah",
          timezone157: "America/North_Dakota/Center",
          timezone158: "America/North_Dakota/New_Salem",
          timezone159: "America/Ojinaga",
          timezone160: "America/Panama",
          timezone161: "America/Pangnirtung",
          timezone162: "America/Paramaribo",
          timezone163: "America/Phoenix",
          timezone164: "America/Port-au-Prince",
          timezone165: "America/Port_of_Spain",
          timezone166: "America/Porto_Velho",
          timezone167: "America/Puerto_Rico",
          timezone168: "America/Rainy_River",
          timezone169: "America/Rankin_Inlet",
          timezone170: "America/Recife",
          timezone171: "America/Regina",
          timezone172: "America/Resolute",
          timezone173: "America/Rio_Branco",
          timezone174: "America/Santarem",
          timezone175: "America/Santiago",
          timezone176: "America/Santo_Domingo",
          timezone177: "America/Sao_Paulo",
          timezone178: "America/Scoresbysund",
          timezone179: "America/Sitka",
          timezone180: "America/St_Barthelemy",
          timezone181: "America/St_Johns",
          timezone182: "America/St_Kitts",
          timezone183: "America/St_Lucia",
          timezone184: "America/St_Thomas",
          timezone185: "America/St_Vincent",
          timezone186: "America/Swift_Current",
          timezone187: "America/Tegucigalpa",
          timezone188: "America/Thule",
          timezone189: "America/Thunder_Bay",
          timezone190: "America/Tijuana",
          timezone191: "America/Toronto",
          timezone192: "America/Tortola",
          timezone193: "America/Vancouver",
          timezone194: "America/Whitehorse",
          timezone195: "America/Winnipeg",
          timezone196: "America/Yakutat",
          timezone197: "America/Yellowknife",
          timezone198: "Antarctica/Casey",
          timezone199: "Antarctica/Davis",
          timezone200: "Antarctica/DumontDUrville",
          timezone201: "Antarctica/Macquarie",
          timezone202: "Antarctica/Mawson",
          timezone203: "Antarctica/McMurdo",
          timezone204: "Antarctica/Palmer",
          timezone205: "Antarctica/Rothera",
          timezone206: "Antarctica/Syowa",
          timezone207: "Antarctica/Troll",
          timezone208: "Antarctica/Vostok",
          timezone209: "Arctic/Longyearbyen",
          timezone210: "Asia/Aden",
          timezone211: "Asia/Almaty",
          timezone212: "Asia/Amman",
          timezone213: "Asia/Anadyr",
          timezone214: "Asia/Aqtau",
          timezone215: "Asia/Aqtobe",
          timezone216: "Asia/Ashgabat",
          timezone217: "Asia/Atyrau",
          timezone218: "Asia/Baghdad",
          timezone219: "Asia/Bahrain",
          timezone220: "Asia/Baku",
          timezone221: "Asia/Bangkok",
          timezone222: "Asia/Barnaul",
          timezone223: "Asia/Beirut",
          timezone224: "Asia/Bishkek",
          timezone225: "Asia/Brunei",
          timezone226: "Asia/Chita",
          timezone227: "Asia/Choibalsan",
          timezone228: "Asia/Colombo",
          timezone229: "Asia/Damascus",
          timezone230: "Asia/Dhaka",
          timezone231: "Asia/Dili",
          timezone232: "Asia/Dubai",
          timezone233: "Asia/Dushanbe",
          timezone234: "Asia/Famagusta",
          timezone235: "Asia/Gaza",
          timezone236: "Asia/Hebron",
          timezone237: "Asia/Ho_Chi_Minh",
          timezone238: "Asia/Hong_Kong",
          timezone239: "Asia/Hovd",
          timezone240: "Asia/Irkutsk",
          timezone241: "Asia/Jakarta",
          timezone242: "Asia/Jayapura",
          timezone243: "Asia/Jerusalem",
          timezone244: "Asia/Kabul",
          timezone245: "Asia/Kamchatka",
          timezone246: "Asia/Karachi",
          timezone247: "Asia/Kathmandu",
          timezone248: "Asia/Khandyga",
          timezone249: "Asia/Kolkata",
          timezone250: "Asia/Krasnoyarsk",
          timezone251: "Asia/Kuala_Lumpur",
          timezone252: "Asia/Kuching",
          timezone253: "Asia/Kuwait",
          timezone254: "Asia/Macau",
          timezone255: "Asia/Magadan",
          timezone256: "Asia/Makassar",
          timezone257: "Asia/Manila",
          timezone258: "Asia/Muscat",
          timezone259: "Asia/Nicosia",
          timezone260: "Asia/Novokuznetsk",
          timezone261: "Asia/Novosibirsk",
          timezone262: "Asia/Omsk",
          timezone263: "Asia/Oral",
          timezone264: "Asia/Phnom_Penh",
          timezone265: "Asia/Pontianak",
          timezone266: "Asia/Pyongyang",
          timezone267: "Asia/Qatar",
          timezone268: "Asia/Qyzylorda",
          timezone269: "Asia/Riyadh",
          timezone270: "Asia/Sakhalin",
          timezone271: "Asia/Samarkand",
          timezone272: "Asia/Seoul",
          timezone273: "Asia/Shanghai",
          timezone274: "Asia/Singapore",
          timezone275: "Asia/Srednekolymsk",
          timezone276: "Asia/Taipei",
          timezone277: "Asia/Tashkent",
          timezone278: "Asia/Tbilisi",
          timezone279: "Asia/Tehran",
          timezone280: "Asia/Thimphu",
          timezone281: "Asia/Tokyo",
          timezone282: "Asia/Tomsk",
          timezone283: "Asia/Ulaanbaatar",
          timezone284: "Asia/Urumqi",
          timezone285: "Asia/Ust-Nera",
          timezone286: "Asia/Vientiane",
          timezone287: "Asia/Vladivostok",
          timezone288: "Asia/Yakutsk",
          timezone289: "Asia/Yangon",
          timezone290: "Asia/Yekaterinburg",
          timezone291: "Asia/Yerevan",
          timezone292: "Atlantic/Azores",
          timezone293: "Atlantic/Bermuda",
          timezone294: "Atlantic/Canary",
          timezone295: "Atlantic/Cape_Verde",
          timezone296: "Atlantic/Faroe",
          timezone297: "Atlantic/Madeira",
          timezone298: "Atlantic/Reykjavik",
          timezone299: "Atlantic/South_Georgia",
          timezone300: "Atlantic/St_Helena",
          timezone301: "Atlantic/Stanley",
          timezone302: "Australia/Adelaide",
          timezone303: "Australia/Brisbane",
          timezone304: "Australia/Broken_Hill",
          timezone305: "Australia/Currie",
          timezone306: "Australia/Darwin",
          timezone307: "Australia/Eucla",
          timezone308: "Australia/Hobart",
          timezone309: "Australia/Lindeman",
          timezone310: "Australia/Lord_Howe",
          timezone311: "Australia/Melbourne",
          timezone312: "Australia/Perth",
          timezone313: "Australia/Sydney",
          timezone314: "Europe/Amsterdam",
          timezone315: "Europe/Andorra",
          timezone316: "Europe/Astrakhan",
          timezone317: "Europe/Athens",
          timezone318: "Europe/Belgrade",
          timezone319: "Europe/Berlin",
          timezone320: "Europe/Bratislava",
          timezone321: "Europe/Brussels",
          timezone322: "Europe/Bucharest",
          timezone323: "Europe/Budapest",
          timezone324: "Europe/Busingen",
          timezone325: "Europe/Chisinau",
          timezone326: "Europe/Copenhagen",
          timezone327: "Europe/Dublin",
          timezone328: "Europe/Gibraltar",
          timezone329: "Europe/Guernsey",
          timezone330: "Europe/Helsinki",
          timezone331: "Europe/Isle_of_Man",
          timezone332: "Europe/Istanbul",
          timezone333: "Europe/Jersey",
          timezone334: "Europe/Kaliningrad",
          timezone335: "Europe/Kiev",
          timezone336: "Europe/Kirov",
          timezone337: "Europe/Lisbon",
          timezone338: "Europe/Ljubljana",
          timezone339: "Europe/London",
          timezone340: "Europe/Luxembourg",
          timezone341: "Europe/Madrid",
          timezone342: "Europe/Malta",
          timezone343: "Europe/Mariehamn",
          timezone344: "Europe/Minsk",
          timezone345: "Europe/Monaco",
          timezone346: "Europe/Moscow",
          timezone347: "Europe/Oslo",
          timezone348: "Europe/Paris",
          timezone349: "Europe/Podgorica",
          timezone350: "Europe/Prague",
          timezone351: "Europe/Riga",
          timezone352: "Europe/Rome",
          timezone353: "Europe/Samara",
          timezone354: "Europe/San_Marino",
          timezone355: "Europe/Sarajevo",
          timezone356: "Europe/Saratov",
          timezone357: "Europe/Simferopol",
          timezone358: "Europe/Skopje",
          timezone359: "Europe/Sofia",
          timezone360: "Europe/Stockholm",
          timezone361: "Europe/Tallinn",
          timezone362: "Europe/Tirane",
          timezone363: "Europe/Ulyanovsk",
          timezone364: "Europe/Uzhgorod",
          timezone365: "Europe/Vaduz",
          timezone366: "Europe/Vatican",
          timezone367: "Europe/Vienna",
          timezone368: "Europe/Vilnius",
          timezone369: "Europe/Volgograd",
          timezone370: "Europe/Warsaw",
          timezone371: "Europe/Zagreb",
          timezone372: "Europe/Zaporozhye",
          timezone373: "Europe/Zurich",
          timezone374: "Indian/Antananarivo",
          timezone375: "Indian/Chagos",
          timezone376: "Indian/Christmas",
          timezone377: "Indian/Cocos",
          timezone378: "Indian/Comoro",
          timezone379: "Indian/Kerguelen",
          timezone380: "Indian/Mahe",
          timezone381: "Indian/Maldives",
          timezone382: "Indian/Mauritius",
          timezone383: "Indian/Mayotte",
          timezone384: "Indian/Reunion",
          timezone385: "Pacific/Apia",
          timezone386: "Pacific/Auckland",
          timezone387: "Pacific/Bougainville",
          timezone388: "Pacific/Chatham",
          timezone389: "Pacific/Chuuk",
          timezone390: "Pacific/Easter",
          timezone391: "Pacific/Efate",
          timezone392: "Pacific/Enderbury",
          timezone393: "Pacific/Fakaofo",
          timezone394: "Pacific/Fiji",
          timezone395: "Pacific/Funafuti",
          timezone396: "Pacific/Galapagos",
          timezone397: "Pacific/Gambier",
          timezone398: "Pacific/Guadalcanal",
          timezone399: "Pacific/Guam",
          timezone400: "Pacific/Honolulu",
          timezone401: "Pacific/Johnston",
          timezone402: "Pacific/Kiritimati",
          timezone403: "Pacific/Kosrae",
          timezone404: "Pacific/Kwajalein",
          timezone405: "Pacific/Majuro",
          timezone406: "Pacific/Marquesas",
          timezone407: "Pacific/Midway",
          timezone408: "Pacific/Nauru",
          timezone409: "Pacific/Niue",
          timezone410: "Pacific/Norfolk",
          timezone411: "Pacific/Noumea",
          timezone412: "Pacific/Pago_Pago",
          timezone413: "Pacific/Palau",
          timezone414: "Pacific/Pitcairn",
          timezone415: "Pacific/Pohnpei",
          timezone416: "Pacific/Port_Moresby",
          timezone417: "Pacific/Rarotonga",
          timezone418: "Pacific/Saipan",
          timezone419: "Pacific/Tahiti",
          timezone420: "Pacific/Tarawa",
          timezone421: "Pacific/Tongatapu",
          timezone422: "Pacific/Wake",
          timezone423: "Pacific/Wallis",
          timezone424: "UTC"
        },
    },
    device: {
        type: {
            value1: "Bot",
            value2: "Computer",
            value3: "Feature Phone",
            value4: "Smartphone",
            value5: "Tablet",
            value6: "Smart TV",
            value7: "Google Glasss",
            value8: "Other(Mobile)",
            value9: "Other(NonMob)"
        },
        brand: {
            value1: "Value 1" //change to direct entry
        },
        model: {
            value1: "Value 1" //change to direct entry
        },
        name: {
            value1: "Value 1" //change to direct entry
        },
        manufacturer: {
          value0: "101d Platinum v3",
          value1: "Alcatel",
          value2: "Argos",
          value3: "Asus",
          value4: "CPH1707",
          value5: "Casio",
          value6: "Colors Mobile",
          value7: "Coolpad",
          value8: "DS116",
          value9: "Datawind",
          value10: "E Fun",
          value11: "Fujitsu",
          value12: "Fujitsu Toshiba",
          value13: "Google",
          value14: "HTC",
          value15: "Haier",
          value16: "Hisense",
          value17: "Huawei",
          value18: "Innos",
          value19: "JP Couto",
          value20: "Kyocera",
          value21: "Kyocera Communications",
          value22: "Kyros",
          value23: "LG",
          value24: "LeEco",
          value25: "Lenovo",
          value26: "Maction",
          value27: "Majestic",
          value28: "Medias X",
          value29: "Micromax",
          value30: "Motorola",
          value31: "Movistar",
          value32: "NEC",
          value33: "Netsurfer Dual 7 Slim",
          value34: "Nokia",
          value35: "Olivetti",
          value36: "Orbic",
          value37: "PCD",
          value38: "Panasonic",
          value39: "Pantech",
          value40: "Poli Electronics",
          value41: "R528",
          value42: "Sagem",
          value43: "Samsung",
          value44: "Sanyo",
          value45: "Sharp",
          value46: "SmartLike",
          value47: "Softbank",
          value48: "Sony",
          value49: "Sony Ericsson",
          value50: "SonyEricsson",
          value51: "Southern Telecom",
          value52: "Spice",
          value53: "TCL",
          value54: "TCT",
          value55: "Telcel",
          value56: "Tempo",
          value57: "Toshiba",
          value58: "UTStarcom",
          value59: "Vivitar",
          value60: "WILLCOM",
          value61: "Windpad",
          value62: "Wortmann",
          value63: "X457",
          value64: "Yatay",
          value65: "ZTE",
          value66: "m8wl"
        },
        os: {
          value0: "Android",
          value1: "Bada OS",
          value2: "Desktop",
          value3: "Fire OS",
          value4: "Firefox OS",
          value5: "Hiptop OS",
          value6: "Linux Desktop",
          value7: "Linux Smartphone OS",
          value8: "MTK/Nucleus OS",
          value9: "Mac OS X",
          value10: "MeeGo",
          value11: "PSP OS",
          value12: "Palm OS",
          value13: "PlayStation OS",
          value14: "RIM OS",
          value15: "RIM Tablet OS",
          value16: "Rex Qualcomm OS",
          value17: "Symbian OS",
          value18: "Tizen",
          value19: "Ubuntu Touch",
          value20: "Windows",
          value21: "Windows CE",
          value22: "Windows Mobile OS",
          value23: "Windows Phone OS",
          value24: "Windows RT",
          value25: "Xbox OS",
          value26: "iOS",
          value27: "macOS",
          value28: "webOS"
        },
        os_version: {
            value1: "Value 1" //change to direct entry
        },
        browser: {
            value1: "Value 1" //change to direct entry
        },
        browser_language: {
          value0: "Abkhazian",
          value1: "Afar",
          value2: "Afrikaans",
          value3: "Albanian",
          value4: "Amharic",
          value5: "All Arabic",
          value6: "Arabic (Algeria)",
          value7: "Arabic (Bahrain)",
          value8: "Arabic (Egypt)",
          value9: "Arabic (Iraq)",
          value10: "Arabic (Jordan)",
          value11: "Arabic (Kuwait)",
          value12: "Arabic (Lebanon)",
          value13: "Arabic (Libya)",
          value14: "Arabic (Morocco)",
          value15: "Arabic (Oman)",
          value16: "Arabic (Palestine)",
          value17: "Arabic (Qatar)",
          value18: "Arabic (Saudi Arabia)",
          value19: "Arabic (Syria)",
          value20: "Arabic (Tunisia)",
          value21: "Arabic (United Arab Emirates)",
          value22: "Arabic (Yemen)",
          value23: "Aragonese",
          value24: "Armenian",
          value25: "Assamese",
          value26: "Asturian",
          value27: "Aymara",
          value28: "Azerbaijani",
          value29: "Bashkir",
          value30: "Basque",
          value31: "Bengali",
          value32: "Bhutani",
          value33: "Bihari",
          value34: "Bislama",
          value35: "Breton",
          value36: "Bulgarian",
          value37: "Burmese",
          value38: "Byelorussian (Belarusian)",
          value39: "Cambodian",
          value40: "Catalan",
          value41: "All Chinese",
          value42: "Chinese (Hong-Kong)",
          value43: "Chinese (PRC)",
          value44: "Chinese (Singapore)",
          value45: "Chinese (Taiwan)",
          value46: "Corsican",
          value47: "Cree",
          value48: "Chuvash",
          value49: "Croatian",
          value50: "Czech",
          value51: "Danish",
          value52: "All Dutch",
          value53: "Dutch (Belgian)",
          value54: "Dutch (Netherlands)",
          value55: "All English",
          value56: "English (Australia)",
          value57: "English (Belize)",
          value58: "English (Canada)",
          value59: "English (Ireland)",
          value60: "English (Jamaica)",
          value61: "English (New Zealand)",
          value62: "English (Philippines)",
          value63: "English (South Africa)",
          value64: "English (Trinidad and Tobago)",
          value65: "English (United Kingdom)",
          value66: "English (United States)",
          value67: "English (Zimbabwe)",
          value68: "Esperanto",
          value69: "Estonian",
          value70: "Faeroese",
          value71: "Farsi (Persian)",
          value72: "Fiji",
          value73: "Finnish",
          value74: "All French",
          value75: "French (Belgium)",
          value76: "French (Canada)",
          value77: "French (France)",
          value78: "French (Luxembourg)",
          value79: "French (Monaco)",
          value80: "French (Switzerland)",
          value81: "Frisian",
          value82: "Galician",
          value83: "Gaelic (Scottish)",
          value84: "Gaelic (Irish)",
          value85: "Gaelic (Manx)",
          value86: "Georgian",
          value87: "All German",
          value88: "German (Austria)",
          value89: "German (Germany)",
          value90: "German (Liechtenstein)",
          value91: "German (Luxembourg)",
          value92: "German (Switzerland)",
          value93: "Greek",
          value94: "Greenlandic",
          value95: "Guarani",
          value96: "Gujarati",
          value97: "Haitian Creole",
          value98: "Hausa",
          value99: "Hebrew",
          value100: "Hindi",
          value101: "Hungarian",
          value102: "Icelandic",
          value103: "Ido",
          value104: "Indonesian",
          value105: "Interlingua",
          value106: "Interlingue",
          value107: "Inuktitut",
          value108: "Inupiak",
          value109: "Irish",
          value110: "All Italian",
          value111: "Italian (Italy)",
          value112: "Italian (Switzerland)",
          value113: "Japanese",
          value114: "Javanese",
          value115: "Kannada",
          value116: "Kashmiri",
          value117: "Kazakh",
          value118: "Kinyarwanda (Ruanda)",
          value119: "Kirghiz",
          value120: "Kirundi (Rundi)",
          value121: "All Korean",
          value122: "Korean (North Korea)",
          value123: "Korean (South Korea)",
          value124: "Kurdish",
          value125: "Laothian",
          value126: "Latin",
          value127: "Latvian (Lettish)",
          value128: "Limburgish (Limburger)",
          value129: "Lingala",
          value130: "Lithuanian",
          value131: "Macedonian",
          value132: "Malagasy",
          value133: "Malay",
          value134: "Malayalam",
          value135: "Maltese",
          value136: "Maori",
          value137: "Marathi",
          value138: "Moldavian",
          value139: "Mongolian",
          value140: "Nauru",
          value141: "Nepali",
          value142: "Norwegian",
          value143: "Norwegian (Bokmal)",
          value144: "Norwegian (Nynorsk)",
          value145: "Occitan",
          value146: "Oriya",
          value147: "Oromo (Afaan Oromo)",
          value148: "Pashto (Pushto)",
          value149: "Polish",
          value150: "All Portuguese",
          value151: "Portuguese (Portugal)",
          value152: "Portuguese (Brazil)",
          value153: "All Punjabi",
          value154: "Punjabi (India)",
          value155: "Punjabi (Pakistan)",
          value156: "Quechua",
          value157: "Rhaeto-Romance",
          value158: "All Romanian",
          value159: "Romanian (Romania)",
          value160: "Romanian (Moldavia)",
          value161: "All Russian",
          value162: "Russian (Russia)",
          value163: "Russian (Moldavia)",
          value164: "Samoan",
          value165: "Sangro",
          value166: "Sanskrit",
          value167: "Serbian",
          value168: "Serbo-Croatian",
          value169: "Sesotho",
          value170: "Setswana",
          value171: "Shona",
          value172: "Sichuan Yi",
          value173: "Sindhi",
          value174: "Sinhalese",
          value175: "Siswati",
          value176: "Slovak",
          value177: "Slovenian",
          value178: "Somali",
          value179: "All Spanish",
          value180: "Spanish (Argentina)",
          value181: "Spanish (Bolivia)",
          value182: "Spanish (Chile)",
          value183: "Spanish (Colombia)",
          value184: "Spanish (Costa Rica)",
          value185: "Spanish (Dominican Republic)",
          value186: "Spanish (Ecuador)",
          value187: "Spanish (Al Salvador)",
          value188: "Spanish (Guatemala)",
          value189: "Spanish (Honduras)",
          value190: "Spanish (Mexico)",
          value191: "Spanish (Nicaragua)",
          value192: "Spanish (Panama)",
          value193: "Spanish (Paraguay)",
          value194: "Spanish (Peru)",
          value195: "Spanish (Puerto Rico)",
          value196: "Spanish (Spain)",
          value197: "Spanish (Uruguay)",
          value198: "Spanish (Venezuela)",
          value199: "Sundanese",
          value200: "Swahili (Kiswahili)",
          value201: "All Swedish",
          value202: "Swedish (Finland)",
          value203: "Swedish (Sweden)",
          value204: "Tagalog",
          value205: "Tajik",
          value206: "Tamil",
          value207: "Tatar",
          value208: "Telugu",
          value209: "Thai",
          value210: "Tibetan",
          value211: "Tigrinya",
          value212: "Tonga",
          value213: "Tsonga",
          value214: "Turkish",
          value215: "Turkmen",
          value216: "Twi",
          value217: "Uighur",
          value218: "Ukrainian",
          value219: "Urdu",
          value220: "Uzbek",
          value221: "Vietnamese",
          value222: "Volapük",
          value223: "Wallon",
          value224: "Welsh",
          value225: "Wolof",
          value226: "Xhosa",
          value227: "Yiddish",
          value228: "Yoruba",
          value229: "Zulu"
        },
        browser_version: {
            value1: "Value 1" //change to direct input
        },
        display_width: {
            value1: "Value 1" //change to direct input
        },
        display_height: {
            value1: "Value 1" //change to direct input
        },
    },
    connection: {
        type: {
            value1: "Mobile",
            value2: "Wifi",
            value3: "Wired",
            value4: "Dialup",
            value5: "Satellite",
        }
    }
};

export default {
    conjunctions: {
        AND: {
            label: 'AND',
            formatConj: (children, conj, not, isForDisplay) => {
                return children.size > 1 ?
                    (not ? "NOT " : "") + '(' + children.join(' ' + (isForDisplay ? "AND" : "&&") + ' ') + ')'
                    : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
            },
        },
        OR: {
            label: 'OR',
            formatConj: (children, conj, not, isForDisplay) => {
                return children.size > 1 ?
                    (not ? "NOT " : "") + '(' + children.join(' ' + (isForDisplay ? "OR" : "||") + ' ') + ')'
                    : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
            },
        },
    },
    fields: {
        location: {
            label: 'Location',
            type: '!struct',
            subfields: {
                continent: {
                    label: 'Continent',
                    type: 'select',
                    listValues: staticList.location.continent,
                },
                country: {
                    label: 'Country',
                    type: 'select',
                    listValues: staticList.location.country,
                },
                city: {
                    label: 'City',
                    type: 'text',
                },
                region: {
                    label: 'Region',
                    type: 'select',
                    listValues: staticList.location.region,
                },
                timezone: {
                    label: 'Timezone',
                    type: 'select',
                    listValues: staticList.location.timezone,
                },
            }
        },
        device: {
            label: 'Device',
            type: '!struct',
            subfields: {
                type: {
                    label: 'Type',
                    type: 'select',
                    listValues: staticList.device.type,
                },
                brand: {
                    label: 'Brand',
                    type: 'select',
                    listValues: staticList.device.brand,
                },
                model: {
                    label: 'Model',
                    type: 'select',
                    listValues: staticList.device.model,
                },
                name: {
                    label: 'Name',
                    type: 'select',
                    listValues: staticList.device.name,
                },
                manufacturer: {
                    label: 'Manufacturer',
                    type: 'select',
                    listValues: staticList.device.manufacturer,
                },
                os: {
                    label: 'OS',
                    type: 'select',
                    listValues: staticList.device.os,
                },
                os_version: {
                    label: 'OS Version',
                    type: 'select',
                    listValues: staticList.device.os_version,
                },
                browser: {
                    label: 'Browser',
                    type: 'select',
                    listValues: staticList.device.browser,
                },
                browser_language: {
                    label: 'Browser Language',
                    type: 'select',
                    listValues: staticList.device.browser_language,
                },
                browser_version: {
                    label: 'Browser Version',
                    type: 'select',
                    listValues: staticList.device.browser_version,
                },
                display_width: {
                    label: 'Display Width',
                    type: 'select',
                    listValues: staticList.device.display_width,
                },
                display_height: {
                    label: 'Display Height',
                    type: 'select',
                    listValues: staticList.device.display_height,
                },
            }
        },
        connection: {
            label: 'Connection',
            type: '!struct',
            subfields: {
                type: {
                    label: 'type',
                    type: 'select',
                    listValues: staticList.connection.type,
                },
                ip: {
                    label: 'IP',
                    type: 'text',
                },
                user_agent: {
                    label: 'User Agent',
                    type: 'text',
                },
                referrer: {
                    label: 'Referrer',
                    type: 'text',
                },
                current_url: {
                    label: 'Current URL',
                    type: 'text',
                },
                isp: {
                    label: 'ISP',
                    type: 'text',
                },
                mobile_carrier: {
                    label: 'Mobile Carrier',
                    type: 'text',
                },
            }
        },
        conversion_cap: {
            label: 'Conversion Cap',
            type: '!struct',
            subfields: {
                current_visitor: {
                    label: 'Current Visitor',
                    type: 'number',
                },
                globally_on_offer: {
                    label: 'Globally on Offer',
                    type: 'number',
                },
            }
        },
        quantity: {
            label: 'Quantity',
            type: '!struct',
            subfields: {
                number_of_visitors: {
                    label: 'Number of Visitors',
                    type: 'number',
                },
                number_of_visitors_today: {
                    label: 'Number of Visitors Today',
                    type: 'number',
                },

            }
        },
        time: {
            label: 'Time',
            type: '!struct',
            subfields: {
                date: {
                    label: 'Date',
                    type: 'date',
                    operators: ['greater', 'less'],
                    defaultOperator: 'less',
                },
                time: {
                    label: 'Time',
                    type: 'time',
                    operators: ['greater_or_equal', 'less_or_equal', 'between'],
                    defaultOperator: 'between',
                    widgets: {
                        time: {
                            opProps: {
                                between: {
                                    valueLabels: [
                                        'Time from',
                                        'Time to'
                                    ],
                                },
                            },
                            widgetProps: {
                                timeFormat: 'h:mm:ss A',
                                use12Hours: true,
                            },
                        },
                    },
                },
                datetime2: {
                    label: 'Date and Time',
                    type: 'datetime',
                    valueSources: ['value']
                },

            }
        },
        tracking_fields: {
            label: 'Tracking Fields',
            type: '!struct',
            subfields: {
                custom_field_1: {
                    label: 'Custom Field 1',
                    type: 'select',
                    listValues: {
                        value1: "value1",
                        value2: "value2",
                        value3: "value3",
                    },
                },
                custom_field_2: {
                    label: 'Custom Field 2',
                    type: 'select',
                    listValues: {
                        value1: "value1",
                        value2: "value2",
                        value3: "value3",
                    },
                },
            }
        },
        others: {
            label: 'Others',
            type: '!struct',
            subfields: {
                visitor_tags: {
                    label: 'Visitors Tags',
                    type: 'select',
                    listValues: {
                        value1: "value1",
                        value2: "value2",
                        value3: "value3",
                    },
                },
                traffic_source: {
                    label: 'Traffic Source',
                    type: 'select',
                    listValues: {
                        value1: "value1",
                        value2: "value2",
                        value3: "value3",
                    },
                },
            },
        },
    },
    types: {
        text: {
            widgets: {
                text: {
                    defaultOperator: 'equal',
                    operators: [
                        'equal',
                        'not_equal',
                        "is_empty",
                        "is_not_empty",
                    ],
                    widgetProps: {
                        formatValue: (val, fieldDef, wgtDef, isForDisplay) => ("_" + JSON.stringify(val)),
                        valueLabel: "Text",
                        valuePlaceholder: "Enter text",
                    }
                },
                field: {
                    operators: [
                        'equal',
                        'not_equal',
                        'proximity'
                    ],
                }
            },
        },
        number: {
            valueSources: ['value'],
            widgets: {
                number: {
                    operators: [
                        "equal",
                        "not_equal",
                        "less",
                        "less_or_equal",
                        "greater",
                        "greater_or_equal",
                        "between",
                        "not_between",
                        "is_empty",
                        "is_not_empty",
                    ],
                    defaultOperator: 'less',
                    widgetProps: {
                        valueLabel: "Number2",
                        valuePlaceholder: "Enter number2",
                    }
                }
            },
        },
        date: {
            widgets: {
                date: {
                    operators: [
                        "equal",
                        "not_equal",
                        "less",
                        "less_or_equal",
                        "greater",
                        "greater_or_equal",
                        "between",
                        "not_between",
                        "is_empty",
                        "is_not_empty",
                    ]
                }
            },
        },
        time: {
            widgets: {
                time: {
                    operators: [
                        "equal",
                        "not_equal",
                        "less",
                        "less_or_equal",
                        "greater",
                        "greater_or_equal",
                        "between",
                        "not_between",
                        "is_empty",
                        "is_not_empty",
                    ]
                }
            },
        },
        datetime: {
            widgets: {
                datetime: {
                    operators: [
                        "equal",
                        "not_equal",
                        "less",
                        "less_or_equal",
                        "greater",
                        "greater_or_equal",
                        "between",
                        "not_between",
                        "is_empty",
                        "is_not_empty",
                    ],
                    opProps: {
                        between: {
                            valueLabels: [
                                {label: 'Date from', placeholder: 'Enrer datetime from'},
                                {label: 'Date to', placeholder: 'Enter datetime to'},
                            ],
                        },
                    },
                    widgetProps: {
                        timeFormat: 'HH:mm',
                        dateFormat: 'YYYY-MM-DD',
                        valueFormat: 'YYYY-MM-DD HH:mm',
                    }
                }
            },
        },
        select: {
            mainWidget: "select",
            widgets: {
                select: {
                    operators: [
                        'select_equals',
                        'select_not_equals'
                    ],
                    widgetProps: {
                        customProps: {
                            showSearch: true
                        }
                    },
                },
                multiselect: {
                    operators: [
                        'select_any_in',
                        'select_not_any_in'
                    ],
                    widgetProps: {},
                },
            },
        },
        multiselect: {
            widgets: {
                multiselect: {
                    operators: [
                        'equal',
                        'not_equal',
                        'select_any_in',
                        'select_not_any_in'
                    ]
                }
            },
        },
        boolean: {
            widgets: {
                boolean: {
                    operators: [
                        "equal",
                    ],
                    widgetProps: {
                        //you can enable this if you don't use fields as value sources
                        //hideOperator: true,
                        //operatorInlineLabel: "is",
                    }
                },
                field: {
                    operators: [
                        "equal",
                        "not_equal",
                    ],
                }
            },
        },
    },
    operators: {
        equal: {
            label: 'IS',
            labelForFormat: '==',
            reversedOp: 'not_equal',
        },
        not_equal: {
            label: 'IS NOT',
            labelForFormat: '!=',
            reversedOp: 'equal',
        },
        less: {
            label: '<',
            labelForFormat: '<',
            reversedOp: 'greater_or_equal',
        },
        less_or_equal: {
            label: '<=',
            labelForFormat: '<=',
            reversedOp: 'greater',
        },
        greater: {
            label: '>',
            labelForFormat: '>',
            reversedOp: 'less_or_equal',
        },
        greater_or_equal: {
            label: '>=',
            labelForFormat: '>=',
            reversedOp: 'less',
        },
        between: {
            label: 'Between',
            labelForFormat: 'BETWEEN',
            cardinality: 2,
            formatOp: (field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) => {
                let valFrom = values.first();
                let valTo = values.get(1);
                if (isForDisplay)
                    return `${field} >= ${valFrom} AND ${field} <= ${valTo}`;
                else
                    return `${field} >= ${valFrom} && ${field} <= ${valTo}`;
            },
            valueLabels: [
                'Value from',
                'Value to'
            ],
            textSeparators: [
                null,
                'and'
            ],
            reversedOp: 'not_between',
        },
        not_between: {
            label: 'Not between',
            labelForFormat: 'NOT BETWEEN',
            cardinality: 2,
            reversedOp: 'between',
            valueLabels: [
                'Value from',
                'Value to'
            ],
            textSeparators: [
                null,
                'and'
            ],
            reversedOp: 'between',
        },
        is_empty: {
            isUnary: true,
            label: 'Is Empty',
            labelForFormat: 'IS EMPTY',
            cardinality: 0,
            reversedOp: 'is_not_empty',
            formatOp: (field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                return isForDisplay ? `${field} IS EMPTY` : `!${field}`;
            },
        },
        is_not_empty: {
            isUnary: true,
            label: 'Is not empty',
            labelForFormat: 'IS NOT EMPTY',
            cardinality: 0,
            reversedOp: 'is_empty',
            formatOp: (field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                return isForDisplay ? `${field} IS NOT EMPTY` : `!!${field}`;
            },
        },
        select_equals: {
            label: 'IS',
            labelForFormat: '==',
            formatOp: (field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                return `${field} == ${value}`;
            },
            reversedOp: 'select_not_equals',
        },
        select_not_equals: {
            label: 'IS NOT',
            labelForFormat: '!=',
            formatOp: (field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                return `${field} != ${value}`;
            },
            reversedOp: 'select_equals',
        },
        select_any_in: {
            label: 'ANY IN',
            labelForFormat: 'IN',
            formatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                if (valueSrc == 'value')
                    return `${field} IN (${values.join(', ')})`;
                else
                    return `${field} IN (${values})`;
            },
            reversedOp: 'select_not_any_in',
        },
        select_not_any_in: {
            label: 'NOT IN',
            labelForFormat: 'NOT IN',
            formatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                if (valueSrc == 'value')
                    return `${field} NOT IN (${values.join(', ')})`;
                else
                    return `${field} NOT IN (${values})`;
            },
            reversedOp: 'select_any_in',
        },
        multiselect_equals: {
            label: 'Equals',
            labelForFormat: '==',
            formatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                if (valueSrc == 'value')
                    return `${field} == [${values.join(', ')}]`;
                else
                    return `${field} == ${values}`;
            },
            reversedOp: 'multiselect_not_equals',
        },
        multiselect_not_equals: {
            label: 'Not equals',
            labelForFormat: '!=',
            formatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                if (valueSrc == 'value')
                    return `${field} != [${values.join(', ')}]`;
                else
                    return `${field} != ${values}`;
            },
            reversedOp: 'multiselect_equals',
        },
        proximity: {
            label: 'Proximity search',
            cardinality: 2,
            valueLabels: [
                {label: 'Word 1', placeholder: 'Enter first word'},
                'Word 2'
            ],
            textSeparators: [
                //'Word 1',
                //'Word 2'
            ],
            formatOp: (field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) => {
                let val1 = values.first();
                let val2 = values.get(1);
                return `${field} ${val1} NEAR/${operatorOptions.get('proximity')} ${val2}`;
            },
            options: {
                optionLabel: "Near",
                optionTextBefore: "Near",
                optionPlaceholder: "Select words between",
                factory: (props) => <ProximityOperator {...props} />,
                defaults: {
                    proximity: 2
                }
            }
        },
    },
    widgets: {
        text: {
            type: "text",
            valueSrc: 'value',
            factory: (props) => <TextWidget {...props} />,
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                return isForDisplay ? '"' + val + '"' : JSON.stringify(val);
            },
            validateValue: (val, fieldDef) => {
                return (val != "test");
            },
        },
        number: {
            type: "number",
            valueSrc: 'value',
            factory: (props) => <NumberWidget {...props} />,
            valueLabel: "Number",
            valuePlaceholder: "Enter number",
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                return isForDisplay ? val : JSON.stringify(val);
            },
        },
        select: {
            type: "select",
            valueSrc: 'value',
            factory: (props) => <SelectWidget {...props} />,
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                let valLabel = fieldDef.listValues[val];
                return isForDisplay ? '"' + valLabel + '"' : JSON.stringify(val);
            },
        },
        multiselect: {
            type: "multiselect",
            valueSrc: 'value',
            factory: (props) => <MultiSelectWidget {...props} />,
            formatValue: (vals, fieldDef, wgtDef, isForDisplay) => {
                let valsLabels = vals.map(v => fieldDef.listValues[v]);
                return isForDisplay ? valsLabels.map(v => '"' + v + '"') : vals.map(v => JSON.stringify(v));
            },
        },
        date: {
            type: "date",
            valueSrc: 'value',
            factory: (props) => <DateWidget {...props} />,
            dateFormat: 'DD.MM.YYYY',
            valueFormat: 'YYYY-MM-DD',
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                let dateVal = moment(val, wgtDef.valueFormat);
                return isForDisplay ? '"' + dateVal.format(wgtDef.dateFormat) + '"' : JSON.stringify(val);
            },
        },
        time: {
            type: "time",
            valueSrc: 'value',
            factory: (props) => <TimeWidget {...props} />,
            timeFormat: 'HH:mm',
            valueFormat: 'HH:mm:ss',
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                let dateVal = moment(val, wgtDef.valueFormat);
                return isForDisplay ? '"' + dateVal.format(wgtDef.timeFormat) + '"' : JSON.stringify(val);
            },
        },
        datetime: {
            type: "datetime",
            valueSrc: 'value',
            factory: (props) => <DateTimeWidget {...props} />,
            timeFormat: 'HH:mm',
            dateFormat: 'DD.MM.YYYY',
            valueFormat: 'YYYY-MM-DD HH:mm:ss',
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                let dateVal = moment(val, wgtDef.valueFormat);
                return isForDisplay ? '"' + dateVal.format(wgtDef.dateFormat + ' ' + wgtDef.timeFormat) + '"' : JSON.stringify(val);
            },
        },
        boolean: {
            type: "boolean",
            valueSrc: 'value',
            factory: (props) => <BooleanWidget {...props} />,
            labelYes: "Yes",
            labelNo: "No ",
            formatValue: (val, fieldDef, wgtDef, isForDisplay) => {
                return isForDisplay ? (val ? "Yes" : "No") : JSON.stringify(!!val);
            },
            defaultValue: false,
        },
        field: {
            valueSrc: 'field',
            factory: (props) => <ValueFieldWidget {...props} />,
            formatValue: (val, fieldDef, wgtDef, isForDisplay, valFieldDef) => {
                return isForDisplay ? (valFieldDef.label || val) : val;
            },
            valueLabel: "Field to compare",
            valuePlaceholder: "Select field to compare",
            customProps: {
                showSearch: true
            }
        }
    },
    settings: {
        locale: {
            short: 'en',
            full: 'en-US',
            antd: en_US,
        },
        maxLabelsLength: 50,
        hideConjForOne: true,
        renderSize: 'small',
        renderConjsAsRadios: false,
        renderFieldAndOpAsDropdown: false,
        customFieldSelectProps: {
            showSearch: true
        },
        groupActionsPosition: 'topRight', // oneOf [topLeft, topCenter, topRight, bottomLeft, bottomCenter, bottomRight]
        setOpOnChangeField: ['keep', 'default'], // 'default' (default if present), 'keep' (keep prev from last field), 'first', 'none'
        clearValueOnChangeField: false, //false - if prev & next fields have same type (widget), keep
        clearValueOnChangeOp: false,
        setDefaultFieldAndOp: false,
        maxNesting: 10,
        fieldSeparator: '.',
        fieldSeparatorDisplay: '->',
        showLabels: false,
        valueLabel: "Value",
        valuePlaceholder: "Value",
        fieldLabel: "Field",
        operatorLabel: "Operator",
        fieldPlaceholder: "Select field",
        operatorPlaceholder: "Select operator",
        deleteLabel: null,
        addGroupLabel: "Add group",
        addRuleLabel: "Add rule",
        readonlyMode: false,
        notLabel: "Not",
        showNot: true,
        delGroupLabel: null,
        canLeaveEmptyGroup: true, //after deletion
        formatReverse: (q, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) => {
            if (isForDisplay)
                return "NOT(" + q + ")";
            else
                return "!(" + q + ")";
        },
        formatField: (field, parts, label2, fieldDefinition, config, isForDisplay) => {
            if (isForDisplay)
                return label2;
            else
                return field;
        },
        valueSourcesInfo: {
            value: {
                label: "Value"
            },
            field: {
                label: "Field",
                widget: "field",
            }
        },
        valueSourcesPopupTitle: "Select value source",
        canReorder: true,
        canCompareFieldWithField: (leftField, leftFieldConfig, rightField, rightFieldConfig) => {
            //for type == 'select'/'multiselect' you can check listValues
            return true;
        },
    }
};
